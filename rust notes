Reasoned about Rust vs C/C++ in performance-critical applications for a few seconds
Replacing C/C++ with Rust in performance-critical applications—like real-time data processing—can be important due to several key factors:

Memory Safety:
C/C++ allow direct memory manipulation, which gives you fine-grained control but also opens the door to common issues like buffer overflows, dangling pointers, and memory leaks. Rust's ownership model and strict compile-time checks prevent these issues, reducing the risk of crashes or unpredictable behavior, which is critical in real-time systems.

Concurrency Without Data Races:
In real-time applications, it's common to process multiple streams of data concurrently. C/C++ require manual synchronization, which can easily lead to data races if not managed perfectly. Rust's type system and ownership rules enforce safe concurrency, meaning you can build multithreaded applications with fewer worries about subtle, hard-to-detect bugs.

Performance with Safety:
Rust is designed to have performance comparable to C/C++ while offering additional safety guarantees. This means you don’t have to trade performance for safety—a key consideration in real-time data processing where every millisecond counts.

Example: Real-Time Financial Trading System
Imagine a financial trading system that processes real-time market data to make split-second trading decisions. Here’s why Rust could be advantageous over C/C++:

High Throughput:
The system must handle thousands to millions of data packets per second. Rust can achieve this high throughput due to its zero-cost abstractions and low-level control similar to C/C++.

Reliability Under Load:
In C/C++, a minor memory mismanagement issue could lead to a system crash or, worse, a subtle bug that causes incorrect trades, potentially resulting in significant financial loss. Rust’s compile-time checks ensure that many classes of errors (such as null pointer dereferences or data races) are caught before the program ever runs.

Safe Multithreading:
To process data in parallel, the trading system might use multiple threads. Rust’s strict borrowing and ownership rules ensure that data accessed concurrently is done so safely, reducing the risk of race conditions that could corrupt trading data or delay processing.

In summary, while C/C++ are powerful languages that offer high performance, Rust provides similar performance with additional safety guarantees that are crucial in environments where real-time, error-free operation is paramount.

//////////////////////////////////////////////////////////////////////////////    DATA ANALYTICS THROUGH MEASUREMENT OF DATA STREAMS  RUST V.S. C/C++  /////////////////////////////////////////////////////////////////////////////

//Simple workload claclulation large intger config////////////////////////////////////////////////////
///////////////////////   ENCODER Pulsess PArt 2 ///////////////////////////////////

//We create 4 data streams, each a vector of 1,000,000 integers.
//Each stream is processed in its own thread (summing up its values).
//The total elapsed time for processing all streams is measured using Instant::now().

///////////////////////   RUST   //////////////////////////////////////////////////////////////////

use std::thread;
use std::time::Instant;

fn process_data_stream(id: usize, data: Vec<u32>) {
    let mut sum = 0u64;
    for val in data {
        sum += val as u64;
    }
    println!("Thread {}: sum = {}", id, sum);
}

fn main() {
    let num_streams = 4; // Number of data streams (threads)
    let data_size = 1_000_000; // Size of each data stream
    
    // Create dummy data streams
    let streams: Vec<Vec<u32>> = (0..num_streams)
        .map(|_| (0..data_size).map(|x| x as u32).collect())
        .collect();
    
    let start = Instant::now();
    
    // Spawn a thread for each data stream
    let handles: Vec<_> = streams.into_iter().enumerate().map(|(i, data)| {
        thread::spawn(move || {
            process_data_stream(i, data);
        })
    }).collect();
    
    // Wait for all threads to complete
    for handle in handles {
        handle.join().unwrap();
    }
    
    let duration = start.elapsed();
    println!("Time elapsed: {:?}", duration);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////

//Similar to the Rust version, we generate 4 data streams, each a vector of 1,000,000 integers.
//Each stream is processed concurrently in a separate thread (again, summing the values).
//The total time taken is measured using std::chrono::high_resolution_clock.

///////////////////////////////////////////////   C/C++   //////////////////////////////////////////////////////////////////////////

#include <iostream>
#include <vector>
#include <thread>
#include <chrono>

void process_data_stream(int id, std::vector<uint32_t> data) {
    uint64_t sum = 0;
    for (auto val : data) {
        sum += val;
    }
    std::cout << "Thread " << id << ": sum = " << sum << std::endl;
}

int main() {
    const int num_streams = 4;     // Number of data streams (threads)
    const int data_size = 1000000; // Size of each data stream
    
    // Create dummy data streams
    std::vector<std::vector<uint32_t>> streams;
    for (int i = 0; i < num_streams; ++i) {
        std::vector<uint32_t> data;
        data.reserve(data_size);
        for (int j = 0; j < data_size; ++j) {
            data.push_back(j);
        }
        streams.push_back(std::move(data));
    }
    
    auto start = std::chrono::high_resolution_clock::now();
    
    // Launch a thread for each data stream
    std::vector<std::thread> threads;
    for (int i = 0; i < num_streams; ++i) {
        threads.emplace_back(process_data_stream, i, streams[i]);
    }
    
    // Wait for all threads to finish
    for (auto &t : threads) {
        t.join();
    }
    
    auto end = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> elapsed = end - start;
    std::cout << "Time elapsed: " << elapsed.count() << " seconds" << std::endl;
    
    return 0;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////

//////////////////////   ENCODER PULSE READING    ////////////////////////////////////////////////////////

//      define a simulation of 1,000,000 encoder pulses.
//      loop represents reading and processing each pulse (here, by simply incrementing a counter)
//      measure the elapsed time using std::time::Instant.

//////////////////////////////////////     RUST     ////////////////////////////////////////////////////

use std::time::Instant;

fn main() {
    let num_pulses = 1_000_000;
    let mut pulse_count: u64 = 0;

    let start = Instant::now();

    // Simulate processing encoder pulses
    for _ in 0..num_pulses {
        // Each iteration simulates reading one pulse from the encoder.
        pulse_count += 1;
    }

    let duration = start.elapsed();
    println!("Processed {} encoder pulses in {:?}", pulse_count, duration);
}


///////////////////////////////////////////////////////////////////////////////////////////////
//////////////
/////////////////////////////////     C/C++  //////////////////////////////////////////

//  We simulate 1,000,000 encoder pulses.
//  loop increments a counter for each pulse, representing the processing of that pulse.
//  use std::chrono::high_resolution_clock to measure the total processing time.

//////////////////////////////

#include <iostream>
#include <chrono>

int main() {
    const uint64_t num_pulses = 1000000;
    uint64_t pulse_count = 0;

    auto start = std::chrono::high_resolution_clock::now();

    // Simulate processing encoder pulses
    for (uint64_t i = 0; i < num_pulses; ++i) {
        // Each iteration simulates reading one pulse from the encoder.
        ++pulse_count;
    }

    auto end = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> elapsed = end - start;
    std::cout << "Processed " << pulse_count 
              << " encoder pulses in " << elapsed.count() 
              << " seconds." << std::endl;

    return 0;
}

//////////////////////////////////////////////////////////////////////////
//////////////   RUST PRESS SENS   //////////////////////////////////////////////////////////////////////////

//   unction read_pressure_sensor() simulates a sensor reading (returning a constant value of 1013.25 hPa).
//   simulate 1,000,000 sensor readings and sum them to calculate an average.
//    Instant::now() and elapsed() functions measure the total time taken for processing.

//////////////////////////////////////////////////////////////////////////////////////////////////////////

use std::time::Instant;

/// Simulate reading a pressure sensor.  
/// In a real system, this function might read from an ADC or sensor interface.
fn read_pressure_sensor() -> f64 {
    // Simulated constant pressure reading in hPa (hectopascals)
    1013.25
}

fn main() {
    let num_readings = 1_000_000;
    let mut sum = 0.0;

    let start = Instant::now();

    // Simulate reading the pressure sensor repeatedly.
    for _ in 0..num_readings {
        let reading = read_pressure_sensor();
        sum += reading;
    }

    let avg = sum / num_readings as f64;
    let duration = start.elapsed();

    println!(
        "Processed {} pressure sensor readings.\nAverage pressure: {:.2} hPa\nTime elapsed: {:?}",
        num_readings, avg, duration
    );
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////  C/C++   press sens//////////////////////

//The read_pressure_sensor() function simulates a pressure sensor read by returning a constant value (1013.25 hPa).
//The program simulates 1,000,000 sensor readings, summing them to compute an average.
//Timing is measured using std::chrono::high_resolution_clock to capture the elapsed time for the process.

////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <iostream>
#include <chrono>

// Simulate reading a pressure sensor.
// In a real-world scenario, this might involve interfacing with hardware.
double read_pressure_sensor() {
    // Return a simulated pressure reading in hPa
    return 1013.25;
}

int main() {
    const uint64_t num_readings = 1000000;
    double sum = 0.0;

    auto start = std::chrono::high_resolution_clock::now();

    // Simulate reading the pressure sensor repeatedly.
    for (uint64_t i = 0; i < num_readings; ++i) {
        double reading = read_pressure_sensor();
        sum += reading;
    }

    double avg = sum / num_readings;
    auto end = std::chrono::high_resolution_clock::now();

    std::chrono::duration<double> elapsed = end - start;
    std::cout << "Processed " << num_readings << " pressure sensor readings.\n"
              << "Average pressure: " << avg << " hPa\n"
              << "Time elapsed: " << elapsed.count() << " seconds." << std::endl;

    return 0;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////
/////////////////////////////////////////////////////////////    RUST LARGE MULTITHREADED INTEGER STREAMS MEASURMENT ///////////////////////////////////

//Data Setup and Sharing:
//
//A large vector of integers is created and then wrapped in an Arc (Atomic Reference Counted pointer).
//Arc allows safe sharing of the data across multiple threads without needing to copy the entire vector.
//Chunking and Threading:
//
// The vector is divided into equal-sized chunks (with the last thread handling any extra elements).
// Each thread sums the values in its assigned chunk.
// Because each thread only reads from its slice, and Arc ensures safe concurrent access, Rust prevents data races at compile time.
//Result Aggregation and Timing:
//
// The main thread waits for all worker threads to complete using .join(), then aggregates their sums.
// The total processing time is measured with Instant::now().
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

use std::sync::Arc;
use std::thread;
use std::time::Instant;

fn main() {
    // Define the size of the integer stream and the number of threads to use.
    let data_size = 10_000_000; // 10 million integers
    let num_threads = 4;
    
    // Create a large vector of integers (1 through data_size).
    let data: Vec<u64> = (1..=data_size).collect();
    // Wrap the vector in an Arc to safely share it across threads.
    let data = Arc::new(data);
    
    // Determine the size of each chunk.
    let chunk_size = data.len() / num_threads;
    
    let start = Instant::now();
    
    // Spawn threads to process each chunk of the integer stream.
    let handles: Vec<_> = (0..num_threads).map(|i| {
        // Clone the Arc to get a new reference for the thread.
        let data_clone = Arc::clone(&data);
        let start_idx = i * chunk_size;
        // Ensure the last thread processes any remaining elements.
        let end_idx = if i == num_threads - 1 {
            data_clone.len()
        } else {
            (i + 1) * chunk_size
        };
        
        thread::spawn(move || {
            // Sum the assigned slice of the integer stream.
            let sum: u64 = data_clone[start_idx..end_idx].iter().sum();
            sum
        })
    }).collect();
    
    // Aggregate the results from all threads.
    let total_sum: u64 = handles.into_iter()
                                .map(|handle| handle.join().unwrap())
                                .sum();
    
    let duration = start.elapsed();
    
    println!("Total sum: {}", total_sum);
    println!("Time elapsed: {:?}", duration);
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
